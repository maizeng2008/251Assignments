import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;


class Map{
    
    public int numberOfRow; /*The nodes connected by the edge*/
    public int numberOfPixels; /*Integer so we can use Comparator*/
    public int[][] image;
    int count; // count this map how many islands
    int mapNumber;
    
    Map(int numberOfRow, int numberOfPixels, int mapNumber){
    	
    		this.numberOfRow = numberOfRow;
    		this.numberOfPixels = numberOfPixels;
    		this.image = new int[numberOfRow][numberOfPixels];
    		this.count = 0;
    		this.mapNumber = mapNumber;
    		
    }
}


public class islands {

	static int number_problems = 0;
	ArrayList<Map> imagesData = new ArrayList<Map>();//this array list will store the number of rows and number of pixels each row
	
	public islands(String file) {
		Scanner f;
		try {
			f = new Scanner(new File(file));
	        number_problems = Integer.parseInt(f.nextLine()); /*first line is the number of problems*/
	        //System.out.println(""+number_problems);
	        for(int i = 0; i < number_problems; i++)
	        {
	        		String[] line = f.nextLine().split("\n");
	        		//System.out.println(line[0]);
	        		//System.out.println(line[1]);
	        		//System.out.println(line[2]);
	        		String[] num = line[0].split(" ");
	        		//System.out.println(num[0]);
	        		//System.out.println(num[1]);
	        		int rows = Integer.parseInt(num[0]);
	        		int pixels = Integer.parseInt(num[1]);
	        		Map theMap = new Map(rows,pixels,i);
	        		int k = 0;
	        		int countForThisLine = 1;//have to make sure that countForThisLine - count == 1
	        		while(k != rows )
	        		{
	        			String theLine = f.next();
	        			//System.out.println(theLine);
	        			for(int j = 0; j < theLine.length(); j++)
	        			{
	        				if(k == 0)
	        				{
	        					if(theLine.charAt(j) == '#')
	        					{
	        						theMap.image[k][j] = 0;
	        					}
	        					else if(theLine.charAt(j) == '-' && j == 0)
	        					{
	        						theMap.image[k][j] = countForThisLine;
	        						countForThisLine++;
	        						theMap.count++;
	        					}
	        					else if(theLine.charAt(j) == '-' && j > 0 && theLine.charAt(j - 1) == '#')
	        					{
	        						theMap.image[k][j] = countForThisLine;
	        						countForThisLine++;
	        						theMap.count++;
	        					}
	        					else if(theLine.charAt(j) == '-' && j > 0 && theLine.charAt(j - 1) == '-')
	        					{
	        						theMap.image[k][j] = theMap.image[k][j-1];
	        					}
	        				}
	        				else
	        				{
	        					if(theLine.charAt(j) == '#')
	        					{
	        						theMap.image[k][j] = 0;
	        					}
	        					else if(theLine.charAt(j) == '-' && j == 0 && theMap.image[k-1][j] != 0) //!= 0 means it is an island
	        					{
	        						theMap.image[k][j] = theMap.image[k-1][j];
	        					}
	        					else if(theLine.charAt(j) == '-' && j == 0 && theMap.image[k-1][j] == 0) //== 0 means it is not an island create a new island!
	        					{
	        						if(theLine.charAt(j+1) == '#') {
	        							theMap.image[k][j] = countForThisLine;
	        							countForThisLine++;
	        							theMap.count++;
	        						}
	        						else if(theLine.charAt(j+1) == '-')
	        						{
	        							if(theMap.image[k-1][j+1] != 0)
	        							{
	        								theMap.image[k][j] = theMap.image[k-1][j+1];
	        							}
	        							else if(theMap.image[k-1][j+1] == 0)
	        							{
	        								theMap.image[k][j] = countForThisLine;
		        							countForThisLine++;
		        							theMap.count++;
		        							continue;
	        							}	
	        						}
	        					}
	        					else if(theLine.charAt(j) == '-' && j > 0 && (theMap.image[k-1][j] != 0 || theMap.image[k][j-1] != 0))//check adjacent vertically or horizontally
	        					{
	        						if(theMap.image[k-1][j] != 0)
	        						{
	        							theMap.image[k][j] = theMap.image[k-1][j];
	        						}
	        						else if(theMap.image[k][j-1] != 0)
	        						{
	        							theMap.image[k][j] = theMap.image[k][j-1];
	        						}
	        					}
	        					else if(theLine.charAt(j) == '-' && j > 0 && j < theLine.length() - 1 && theLine.charAt(j+1) == '-' && theMap.image[k-1][j+1] != 0)
	        					{
	        						theMap.image[k][j] = theMap.image[k-1][j+1];
	        					}
	        					else if(theLine.charAt(j) == '-' && j == theLine.length() - 1 && theMap.image[k-1][j] == 0 && theMap.image[k][j-1] == 0)
	        					{
        							theMap.image[k][j] = countForThisLine;
        							countForThisLine++;
        							theMap.count++;
	        					}
	        					else if(theLine.charAt(j) == '-' && j > 0 && theMap.image[k-1][j] == 0 && theMap.image[k][j-1] == 0 
	        							&& j < theLine.length() - 1)//create a new one maybe
	        					{
	        						if(theLine.charAt(j+1) == '#') {
	        							theMap.image[k][j] = countForThisLine;
	        							countForThisLine++;
	        							theMap.count++;
	        						}
	        						else if(theLine.charAt(j+1) == '-')
	        						{
	        							if(theMap.image[k-1][j+1] != 0)
	        							{
	        								theMap.image[k][j] = theMap.image[k-1][j+1];
	        							}
	        							else if(theMap.image[k-1][j+1] == 0)
	        							{
	        								theMap.image[k][j] = countForThisLine;
		        							countForThisLine++;
		        							theMap.count++;
	        							}
	        								
	        						}
	        					}
	        				}
	        			}
	        			//countForThisLine = 1;
	        			k++;
	        			
	        		}
	        		System.out.println( theMap.count + "  is the count ");
	        		imagesData.add(theMap);
	        }
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// TODO Auto-generated constructor stub
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
        String file = args[0];
        islands g = new islands(file);
        for(int i = 0; i < g.imagesData.size(); i++)
        {
            System.out.println("" + g.imagesData.get(i).count);
        }
	}

}
