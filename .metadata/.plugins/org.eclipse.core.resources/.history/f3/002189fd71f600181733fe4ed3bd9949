import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;


class Map{
    
    public int numberOfRow; /*The nodes connected by the edge*/
    public int numberOfPixels; /*Integer so we can use Comparator*/
    public int[][] image;
    int count; // count this map how many islands
    int mapNumber;
    
    Map(int numberOfRow, int numberOfPixels, int mapNumber){
    	
    		this.numberOfRow = numberOfRow;
    		this.numberOfPixels = numberOfPixels;
    		this.image = new int[numberOfRow][numberOfPixels];
    		this.count = 0;
    		this.mapNumber = mapNumber;
    		
    }
}


public class islands {

	static int number_problems = 0;
	ArrayList<Map> imagesData = new ArrayList<Map>();//this array list will store the number of rows and number of pixels each row
	
	public islands(String file) {
		Scanner f;
		try {
			f = new Scanner(new File(file));
	        number_problems = Integer.parseInt(f.nextLine()); /*first line is the number of problems*/
	        System.out.println("the number of problems is "+number_problems);
	        for(int i = 0; i < number_problems; i++)
	        {
	        		String[] line = f.nextLine().split("\n");
	        		//System.out.println(line[0]);
	        		//System.out.println(line[1]);
	        		//System.out.println(line[2]);
	        		String[] num = line[0].split(" ");
	        		//System.out.println(num[0]);
	        		//System.out.println(num[1]);
	        		if(num.length!=2)
	        		{
	        			String[] line2 = f.nextLine().split("\n");
	        			num = line2[0].split(" ");
	        		}
	        		int rows = Integer.parseInt(num[0]);
	        		int pixels = Integer.parseInt(num[1]);
	        		Map theMap = new Map(rows,pixels,i);
	        		int k = 0;
	        		int countForThisLine = 1;//have to make sure that countForThisLine - count == 1
	        		while(k != rows )
	        		{
	        			String theLine = f.next();
	        			//System.out.println(theLine);
	        			for(int j = 0; j < theLine.length(); j++)
	        			{
	        				if(k == 0)
	        				{
	        					if(theLine.charAt(j) == '#')
	        					{
	        						theMap.image[k][j] = 0;
	        					}
	        					else if(theLine.charAt(j) == '-' && j == 0)
	        					{
	        						theMap.image[k][j] = countForThisLine;
	        						countForThisLine++;
	        						theMap.count++;
	        						System.out.println("it is because (theLine.charAt(j) == '-' && j == 0) now count is "+theMap.count);
	        					}
	        					else if(theLine.charAt(j) == '-' && j > 0 && theLine.charAt(j - 1) == '#')
	        					{
	        						theMap.image[k][j] = countForThisLine;
	        						countForThisLine++;
	        						theMap.count++;
	        						System.out.println("it is because (theLine.charAt(j) == '-' && j > 0 && theLine.charAt(j - 1) == '#') now count is "+theMap.count);
	        					}
	        					else if(theLine.charAt(j) == '-' && j > 0 && theLine.charAt(j - 1) == '-')
	        					{
	        						theMap.image[k][j] = theMap.image[k][j-1];
	        					}
	        				}
	        				else
	        				{
	        					if(theLine.charAt(j) == '#')
	        					{
	        						theMap.image[k][j] = 0;
	        					}
	        					else if(theLine.charAt(j) == '-' && j == 0 && theMap.image[k-1][j] != 0) //!= 0 means it is an island
	        					{
	        						theMap.image[k][j] = theMap.image[k-1][j];
	        					}
	        					else if(theLine.charAt(j) == '-' && j == 0 && theMap.image[k-1][j] == 0) //== 0 means it is not an island create a new island!
	        					{
	        						if(theLine.charAt(j+1) == '#') {
	        							theMap.image[k][j] = countForThisLine;
	        							countForThisLine++;
	        							theMap.count++;
	        							System.out.println("it is because (theLine.charAt(j) == '-' && j == 0 && theMap.image[k-1][j] == 0) (theLine.charAt(j+1) == '#') now count is "+theMap.count);
	        						}
	        						else if(theLine.charAt(j+1) == '-')
	        						{
		        						//int nearestIslandOnTheRightOnTheUpperLevel = findTheNearestIslandOnTheRight(j, k, theMap.image);
	        							if(theMap.image[k-1][j+1] != 0)
	        							{
	        								theMap.image[k][j] = theMap.image[k-1][j+1];
	        							}
	        							else if(theMap.image[k-1][j+1] == 0)
	        							{
	        								theMap.image[k][j] = countForThisLine;
		        							countForThisLine++;
		        							theMap.count++;
		        							System.out.println("it is because (theLine.charAt(j) == '-' && j == 0 && theMap.image[k-1][j] == 0) (theLine.charAt(j+1) == '-') (theMap.image[k-1][j+1] == 0) now count is "+theMap.count);
	        							}	
	        						}
	        					}
	        					else if(theLine.charAt(j) == '-' && j > 0 && (theMap.image[k-1][j] != 0 || theMap.image[k][j-1] != 0))//check adjacent vertically or horizontally
	        					{
	        						if(theMap.image[k-1][j] != 0 && theMap.image[k][j-1] != 0)
	        						{
	        							/*if(j < theLine.length() - 1)
	        							{
			        						if(theLine.charAt(j+1)!= '#')
			        						{
				        						int m = 0;
				        						int nearestIslandOnTheRightOnTheUpperLevel = findTheNearestIslandOnTheRight(j, k, theMap.image);
				        						if(nearestIslandOnTheRightOnTheUpperLevel == -1)
				        						{
				        							theMap.image[k][j] = theMap.image[k-1][j];
				        						}
				        						else 
				        						{
					        						for(m = nearestIslandOnTheRightOnTheUpperLevel; m > j; m--)
					        						{
					        							if(theLine.charAt(m) == '#')
					        							{
					        								theMap.image[k][j] = theMap.image[k-1][j];
						        							break;
					        							}
					        						}
				        						}
				        						if(m == j)
				        						{
				        							theMap.image[k-1][nearestIslandOnTheRightOnTheUpperLevel] = theMap.image[k-1][j];
				        							theMap.image[k][j] = theMap.image[k-1][nearestIslandOnTheRightOnTheUpperLevel];
				        						}
			        						
	        							}*/
		        						//else
	        							int m = 0;
	        							int nearestIslandOnTheLeftOnTheUpperLevel = findTheNearestIslandOnTheLeft(j, k-1, theMap.image);
	        							if(nearestIslandOnTheLeftOnTheUpperLevel == -1)
	        							{
	        								theMap.image[k][j] = theMap.image[k-1][j];
	        							}
	        							else
	        							{
			        						for(m = nearestIslandOnTheLeftOnTheUpperLevel; j > m; m++)
			        						{
			        							if(theLine.charAt(m) == '#')
			        							{
			        								theMap.image[k][j] = theMap.image[k-1][nearestIslandOnTheLeftOnTheUpperLevel];
				        							break;
			        							}
			        						}
	        							}
	        							if(m == j)
	        							{
		        							//theMap.count--;
	        								if(theMap.image[k-1][m-1] == '#')
	        								{
	        									System.out.println("this happen!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\n");
	        									theMap.count--;
	        									countForThisLine--;
	        								}
			        						theMap.image[k][j] = theMap.image[k][j-1];
			        						theMap.image[k-1][j] = theMap.image[k][j-1];
	        							}
	        						}
	        						else if(theMap.image[k-1][j] != 0 && theMap.image[k][j-1] == 0)
	        						{
	        							theMap.image[k][j] = theMap.image[k-1][j];
	        						}
	        						else if(theMap.image[k-1][j] == 0 && theMap.image[k][j-1] != 0)
	        						{
	        							theMap.image[k][j] = theMap.image[k][j-1];
	        						}
	        					}
	        					else if(theLine.charAt(j) == '-' && j > 0 && j < theLine.length() - 1 && theLine.charAt(j+1) == '-' && theMap.image[k-1][j+1] != 0)
	        					{
	        						theMap.image[k][j] = theMap.image[k-1][j+1];
	        					}
	        					else if(theLine.charAt(j) == '-' && j == theLine.length() - 1 && theMap.image[k-1][j] == 0 && theMap.image[k][j-1] == 0)
	        					{
        							theMap.image[k][j] = countForThisLine;
        							countForThisLine++;
        							theMap.count++;
        							System.out.println("it is because (theLine.charAt(j) == '-' && j == theLine.length() - 1 && theMap.image[k-1][j] == 0 && theMap.image[k][j-1] == 0) now count is "+theMap.count);
	        					}
	        					else if(theLine.charAt(j) == '-' && j > 0 && theMap.image[k-1][j] == 0 && theMap.image[k][j-1] == 0 
	        							&& j < theLine.length() - 1)//create a new one maybe
	        					{
	        						/*if(theLine.charAt(j+1) == '#') {
	        							theMap.image[k][j] = countForThisLine;
	        							countForThisLine++;
	        							theMap.count++;
	        							System.out.println("it is because (theLine.charAt(j) == '-' && j > 0 && theMap.image[k-1][j] == 0 && theMap.image[k][j-1] == 0 \n && j < theLine.length() - 1)  (theLine.charAt(j+1) == '#') now count is "+theMap.count);
	        						}
	        						if(theLine.charAt(j+1) == '-')
	        						{
	        							if(theMap.image[k-1][j+1] != 0)
	        							{
	        								theMap.image[k][j] = theMap.image[k-1][j+1];
	        							}
	        							else if(theMap.image[k-1][j+1] == 0)
	        							{
	        								theMap.image[k][j] = countForThisLine;
		        							countForThisLine++;
		        							theMap.count++;
		        							System.out.println("it is becuase (theLine.charAt(j+1) == '-') k-1 j + 1 now count is "+theMap.count);
	        							}	
	        						}*/
	        						int m = 0;
	        						int nearestIslandOnTheRightOnTheUpperLevel = findTheNearestIslandOnTheRight(j, k, theMap.image);
	        						if(nearestIslandOnTheRightOnTheUpperLevel == -1)
	        						{
	        							theMap.image[k][j] = countForThisLine;
	        							countForThisLine++;
	        							theMap.count++;
	        						}
	        						else 
	        						{
		        						for(m = nearestIslandOnTheRightOnTheUpperLevel; m > j; m--)
		        						{
		        							if(theLine.charAt(m) == '#')
		        							{
			        							theMap.image[k][j] = countForThisLine;
			        							countForThisLine++;
			        							theMap.count++;
			        							break;
		        							}
		        						}
	        						}
	        						if(m == j)
	        						{
	        							theMap.image[k][j] = theMap.image[k-1][nearestIslandOnTheRightOnTheUpperLevel];
	        						}
	        						/*for(int m = j+1; m < theLine.length() - 1; m++)
	        						{
		        						if(theLine.charAt(m) == '#') {
		        							theMap.image[k][m] = countForThisLine;
		        							countForThisLine++;
		        							theMap.count++;
		        							System.out.println("it is because (theLine.charAt(j) == '-' && j > 0 && theMap.image[k-1][j] == 0 && theMap.image[k][j-1] == 0 \n && j < theLine.length() - 1)  (theLine.charAt(j+1) == '#') now count is "+theMap.count);
		        							break;
		        						}
	        						}*/
	        					}
	        				}
	        			}
	        			//countForThisLine = 1;
	        			System.out.println("the " + k + " line has "+theMap.count + " islands");
	        			k++;
	        			
	        		}
	        		System.out.println( theMap.count + "  is the count ");
	        		imagesData.add(theMap);
	        }
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// TODO Auto-generated constructor stub
	}

	private int findTheNearestIslandOnTheLeft(int j, int k, int[][] image) {
		// TODO Auto-generated method stub
		for(int m = j - 1; m > 0; m--)
		{
			if(image[k][m] != 0)
			{
				return m;
			}
		}
		return -1;
	}

	private int findTheNearestIslandOnTheRight(int j, int k, int[][] image) {
		// TODO Auto-generated method stub
		for(int m = j+1; m < image[k-1].length; m++)
		{
			if(image[k-1][m] != 0)
			{
				return m;
			}
		}
		
		return -1;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		long start = System.currentTimeMillis();
        String file = args[0];
        islands g = new islands(file);
        for(int i = 0; i < g.imagesData.size(); i++)
        {
            System.out.println("" + g.imagesData.get(i).count);
        }
        long end = System.currentTimeMillis();
        System.out.println("using time is " + (end - start));
	}

}
